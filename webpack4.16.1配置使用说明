以下个核心概念
entry
output
loader
plugins
mode
optimization
devtool
resolve

entry
来指定一个入口起点（或多个入口起点）。默认值为 "./src"
entry不配置的情况下，默认值是"./src"，webpack就会找到src目录下的index.js打包到output里面

--------------------------
devtool
https://www.cnblogs.com/wangyingblog/p/7027540.html
eval	每个module会封装到 eval 里包裹起来执行，并且会在末尾追加注释 //@ sourceURL.
source-map	生成一个SourceMap文件.
hidden-source-map	和 source-map 一样，但不会在 bundle 末尾追加注释.
inline-source-map	生成一个 DataUrl 形式的 SourceMap 文件.
eval-source-map	每个module会通过eval()来执行，并且生成一个DataUrl形式的SourceMap.
cheap-source-map	生成一个没有列信息（column-mappings）的SourceMaps文件，不包含loader的 sourcemap（譬如 babel 的 sourcemap）
cheap-module-source-map	生成一个没有列信息（column-mappings）的SourceMaps文件，同时 loader 的 sourcemap 也被简化为只包含对应行的。


webpack 不仅支持这 7 种，而且它们还是可以任意组合上面的eval、inline、hidden关键字，就如文档所说，你可以设置 souremap 选项为 cheap-module-inline-source-map。
cheap-module-eval-source-map
cheap-module-hidden-source-map
cheap-module-inline-source-map

----------------------------
mode
"development" //|| "production",
开发模式，不会混淆压缩打包，只是正常的合并
默认值为production
会混淆打包

-------------------------
默认即没有entry也没有output的情况下，webpack会进行下列操作
1、entry就会找到"./src/index.js",
mode:"production"并且混淆压缩的方式
打包到"./dist/main.js"

mode:"development" 来取消混淆打包，看看打包之后的文件是什么样的
原理利用表达式 !function(){console.log(arguments)}(1,2)的方式包裹函数
会模拟node调用的方式
****/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
最终返回return module.exports;
https://segmentfault.com/a/1190000010955254

devtool：默认是eval
会以eval("console.log(\"test\")\n\n//# sourceURL=webpack:///./src/index.js?");这种方式包裹
l	每个module会封装到 eval 里包裹起来执行，并且会在末尾追加注释 //@ sourceURL.

--------------------------------------

webpack插件
plugins
数组形式包住一个个 plugin 实例。
定义全局变量
webpack.DefinePlugin (官方的文档)
webpack.xxxxPlugin 这种插件是 webpack 的内置插件。
DefinePlugin：它的作用是定义全局常量，是常量。即在模块用它定义的全局常量，那么你就不能改变它的值啦。用法例子：
Plugins: [
    new webpack.DefinePlugin({
        '_ABC_': false
    })
]
自己定义一个需要定义apply
一、
ConsoleLogOnBuildWebpackPlugin.prototype.apply = function(compiler) {
  compiler.plugin('run', function(compiler, callback) {
    console.log("webpack 构建过程开始！！！");
    callback();
  });
};
二、
 let compiler = webpack(require('./webpack.config.js'));
  compiler.apply(new webpack.ProgressPlugin());
  compiler.run(function(err, stats) {
    // ...
  });
  
  内置plugins
  HotModuleReplacementPlugin --hot
  MinChunkSizePlugin --optimize-min-chunk-size
  LimitChunkCountPlugin --optimize-max-chunks
  webpackJsonp --output-jsonp-function
  UglifyJsPlugin --optimize-minimize
  LoaderOptionsPlugin --optimize-minimize


  ------------------------------------
  resolve
  解决require和import路径问题
   resolve：{
        alias: {
            'vue': 'vue/dist/vue.js'
        }
    },
